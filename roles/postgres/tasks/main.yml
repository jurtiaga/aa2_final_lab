---
- name: Install Postgres packages
  package:
    name: "{{ __package }}"
    state: present
    disable_gpg_check: yes
    disablerepo: "{{ rh_upstream_repo }}"

  loop:
    - "{{ postgres_rhel8_repo }}"
    - "{{ postgres_packages }}"
  loop_control:
    loop_var: __package

  become: yes

- name: Check if Postgres initialized
  stat:
    path: "{{ postgres_12_data_dir }}/PG_VERSION"
  register: r_postgres_init_dir_state

  become: yes

- when: not r_postgres_init_dir_state.stat.exists
  name: Run Postgres initdb to initialize if postgres not initialized
  command: "{{ postgres_12_bin_path }}/postgresql-12-setup initdb"
  notify: restart_postgres
  become: yes

- name: Setup Postgres for remote password auth
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_12_data_dir }}/pg_hba.conf"
  notify: restart_postgres
  become: yes

- name: Setup Postgres to listen on network interfaces
  lineinfile:
    dest: "{{ postgres_12_data_dir }}/postgresql.conf"
    line: "listen_addresses = '*'"
    insertafter: "#listen_addresses"
  notify: restart_postgres
  become: yes

- name: Setup Postgres as started and enabled on boot.
  service:
    name: "{{ postgres_service }}"
    state: "{{ postgres_service_state | default('started') }}"
    enabled: "{{ postgres_service_enabled | default(true) }}"
  
  become: yes

- name: Configure Postgres resources, user, database etc
  block:
    - name: Download pip installer
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py
    
    - name: Install pip
      shell: |
        /usr/bin/python3 /tmp/get-pip.py
    
    - name: Install python-postgres packages
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary
    
    - name: Make sure psycopg2 is installed
      pip:
        name: psycopg2-binary
        state: present
    
    - name: Setup Postgres database(s)
      postgresql_db:
        name: "{{ __database.name }}"
        state: "{{ __database.state | default('present') }}"
      loop: "{{ postgres_databases }}"
      loop_control:
        loop_var: __database

    - name: Create Postgres user#(s)
      postgresql_user:
        name: "{{ __user.name }}"
        password: "{{ __user.password | default(omit) }}"
        encrypted: true # "{{ __user.encrypted | default(omit) }}"
        priv: "{{ __user.priv | default(omit) }}"
        db: "{{ __user.database | default(omit) }}"
        # role_attr_flags: "{{ __user.role_attr_flags | default(omit) }}"
        state: "{{ __user.state | default('present') }}"
      loop: "{{ postgres_users }}"
      loop_control:
        loop_var: __user
      no_log: "{{ postgres_user_no_log_state | default(false) }}"


  become_user: "{{ postgres_user }}"

